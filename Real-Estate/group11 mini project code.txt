#include <windows.h>
#include <stdio.h>
#ifdef __APPLE_CC__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

static int shoulderAngle = 0, elbowAngle = 0;

void keyListener(int key, int, int) {
  switch (key) {
    case GLUT_KEY_LEFT: (elbowAngle += 5) %= 360; break;
    case GLUT_KEY_RIGHT: (elbowAngle -= 5) %= 360; break;
    case GLUT_KEY_UP: (shoulderAngle += 5) %= 360; break;
    case GLUT_KEY_DOWN: (shoulderAngle -= 5) %= 360; break;
    case GLUT_KEY_END: glTranslatef(1, 0,0); break;
    case GLUT_KEY_HOME: glTranslatef(-1, 0,0); break;
    case GLUT_KEY_PAGE_UP: glTranslatef(0, 1, 0); break;
    case GLUT_KEY_PAGE_DOWN: glTranslatef(0, -1,0); break;
    default: return;
  }
  glutPostRedisplay();
}

void createBox(GLdouble width, GLdouble height, GLdouble depth) {
      glPushMatrix();
      glScalef(width, height, depth);
      glutSolidCube(1.0);
      glPopMatrix();
}

void display() {

  glClear(GL_COLOR_BUFFER_BIT);
  glMatrixMode(GL_MODELVIEW);
  glPushMatrix();

  glRotatef((GLfloat)shoulderAngle, 0.0, 0.0, 1.0);
  glTranslatef(1.0, 0.0, 0.0);
  glColor3f(1,0,0);
  createBox(2.0, 0.4, 1.0);

  glTranslatef(1.0, 0.0, 0.0);
  glRotatef((GLfloat)elbowAngle, 0.0, 0.0, 1.0);
  glTranslatef(1.0, 0.0, 0.0);
  glColor3f(0,0,1);
  createBox(2.0, 0.4, 1.0);

  glPopMatrix();
  glFlush();
}


void reshape(GLint w, GLint h) {
  glViewport(0, 0, w, h);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  gluPerspective(65.0, GLfloat(w)/GLfloat(h), 1.0, 20.0);
}

void init() {
  glShadeModel(GL_FLAT);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  gluLookAt(1,2,8, 0,0,0, 0,1,0);
}


int main(int argc, char** argv) {

  printf("#Press\n");
  printf(" left/right arrow key to rotate elbow arm\n");
  printf(" up/down arrow key to rotate shoulder arm\n");
  printf(" end/home arrow key to move left/right arm\n");
  printf(" pg_up/pg_down arrow key to move up and down arm\n");

  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
  glutInitWindowPosition(80, 80);
  glutInitWindowSize(800, 600);
  glutCreateWindow("Robot Arm");
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutSpecialFunc(keyListener);
  init();
  glutMainLoop();
}
